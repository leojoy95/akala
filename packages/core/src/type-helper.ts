export type Arguments<T> = T extends ((...x: infer X) => unknown) ? X : never;
export type Argument0<T> = T extends ((x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument1<T> = T extends ((a: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument2<T> = T extends ((a: unknown, b: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument3<T> = T extends ((a: unknown, b: unknown, c: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument4<T> = T extends ((a: unknown, b: unknown, c: unknown, d: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument5<T> = T extends ((a: unknown, b: unknown, c: unknown, d: unknown, e: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument6<T> = T extends ((a: unknown, b: unknown, c: unknown, d: unknown, e: unknown, f: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument7<T> = T extends ((a: unknown, b: unknown, c: unknown, d: unknown, e: unknown, f: unknown, g: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument8<T> = T extends ((a: unknown, b: unknown, c: unknown, d: unknown, e: unknown, f: unknown, g: unknown, h: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument9<T> = T extends ((a: unknown, b: unknown, c: unknown, d: unknown, e: unknown, f: unknown, g: unknown, h: unknown, i: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument10<T> = T extends ((a: unknown, b: unknown, c: unknown, d: unknown, e: unknown, f: unknown, g: unknown, h: unknown, i: unknown, j: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument11<T> = T extends ((a: unknown, b: unknown, c: unknown, d: unknown, e: unknown, f: unknown, g: unknown, h: unknown, i: unknown, j: unknown, k: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument12<T> = T extends ((a: unknown, b: unknown, c: unknown, d: unknown, e: unknown, f: unknown, g: unknown, h: unknown, i: unknown, j: unknown, k: unknown, l: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument13<T> = T extends ((a: unknown, b: unknown, c: unknown, d: unknown, e: unknown, f: unknown, g: unknown, h: unknown, i: unknown, j: unknown, k: unknown, l: unknown, m: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument14<T> = T extends ((a: unknown, b: unknown, c: unknown, d: unknown, e: unknown, f: unknown, g: unknown, h: unknown, i: unknown, j: unknown, k: unknown, l: unknown, m: unknown, n: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument15<T> = T extends ((a: unknown, b: unknown, c: unknown, d: unknown, e: unknown, f: unknown, g: unknown, h: unknown, i: unknown, j: unknown, k: unknown, l: unknown, m: unknown, n: unknown, o: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument16<T> = T extends ((a: unknown, b: unknown, c: unknown, d: unknown, e: unknown, f: unknown, g: unknown, h: unknown, i: unknown, j: unknown, k: unknown, l: unknown, m: unknown, n: unknown, o: unknown, p: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;
export type Argument17<T> = T extends ((a: unknown, b: unknown, c: unknown, d: unknown, e: unknown, f: unknown, g: unknown, h: unknown, i: unknown, j: unknown, k: unknown, l: unknown, m: unknown, n: unknown, o: unknown, p: unknown, q: unknown, x: infer X, ...z: unknown[]) => unknown) ? X : never;